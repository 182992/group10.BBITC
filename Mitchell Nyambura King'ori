#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <map>

struct Student {
    std::string firstname;
    std::string surname;
    std::string gender;
    int age;
    int group;
    std::vector<std::string> activities;
};

struct Activity {
    std::string name;
    int max_capacity;
    std::vector<Student> members;
};

std::vector<Student> students;
std::vector<Activity> sports = {{"Rugby", 20}, {"Athletics", 20}, {"Swimming", 20}, {"Soccer", 20}};
std::vector<Activity> clubs = {{"Journalism Club", 60}, {"Red Cross Society", 60}, {"AISEC", 60}, {"Business Club", 60}, {"Computer Science Club", 60}};

bool checkGenderBalance(const std::vector<Student>& members, const std::string& gender, int max_percentage) {
    int count = std::count_if(members.begin(), members.end(), [&gender](const Student& s) { return s.gender == gender; });
    return (count * 100) / members.size() <= max_percentage;
}

void addStudent() {
    if (students.size() >= 150) {
        std::cout << "All groups are full.\n";
        return;
    }

    Student student;
    std::cout << "Enter first name: ";
    std::cin >> student.firstname;
    std::cout << "Enter surname: ";
    std::cin >> student.surname;
    std::cout << "Enter gender (Male/Female): ";
    std::cin >> student.gender;
    std::cout << "Enter age: ";
    std::cin >> student.age;
    std::cout << "Enter group (1-3): ";
    std::cin >> student.group;

    if (student.group < 1 || student.group > 3) {
        std::cout << "Invalid group. Please enter a group between 1 and 3.\n";
        return;
    }

    int sport_count = 0;
    int club_count = 0;
    int choice;
    do {
        std::cout << "Choose activity type: 1. Sport 2. Club/Society 3. Done: ";
        std::cin >> choice;

        if (choice == 1 && sport_count < 1) {
            std::cout << "Choose sport: ";
            for (size_t i = 0; i < sports.size(); ++i) {
                std::cout << i + 1 << ". " << sports[i].name << " (" << sports[i].members.size() << "/" << sports[i].max_capacity << ")\n";
            }
            int sport_choice;
            std::cin >> sport_choice;
            if (sport_choice >= 1 && sport_choice <= sports.size()) {
                if (sports[sport_choice - 1].members.size() < sports[sport_choice - 1].max_capacity &&
                    checkGenderBalance(sports[sport_choice - 1].members, student.gender, 75)) {
                    student.activities.push_back(sports[sport_choice - 1].name);
                    sports[sport_choice - 1].members.push_back(student);
                    sport_count++;
                } else {
                    std::cout << "Sport is at full capacity or gender limit exceeded.\n";
                }
            }
        } else if (choice == 2 && club_count < 3 && (sport_count == 0 || club_count < 2)) {
            std::cout << "Choose club/society: ";
            for (size_t i = 0; i < clubs.size(); ++i) {
                std::cout << i + 1 << ". " << clubs[i].name << " (" << clubs[i].members.size() << "/" << clubs[i].max_capacity << ")\n";
            }
            int club_choice;
            std::cin >> club_choice;
            if (club_choice >= 1 && club_choice <= clubs.size()) {
                if (clubs[club_choice - 1].members.size() < clubs[club_choice - 1].max_capacity &&
                    checkGenderBalance(clubs[club_choice - 1].members, student.gender, 50)) {
                    student.activities.push_back(clubs[club_choice - 1].name);
                    clubs[club_choice - 1].members.push_back(student);
                    club_count++;
                } else {
                    std::cout << "Club/Society is at full capacity or gender limit exceeded.\n";
                }
            }
        }
    } while (choice != 3 && (sport_count + club_count) < 3);

    if (sport_count == 0 && club_count == 0) {
        std::cout << "At least one activity must be selected.\n";
        return;
    }


